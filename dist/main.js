/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const searchInput = document.querySelector(\"#search-bar-input\");\nconst searchBtn = document.querySelector(\"#search-bar-button\");\nconst loadingScreen = document.querySelector(\".loading-screen\");\nconst searchResults = document.querySelector(\".city-options\");\nconst searchResultsList = document.querySelector(\".city-options-card-body\");\n\nconst apiKey = \"729134e5477f7d492bfaa4f690bb46ac\";\n\nsearchBtn.addEventListener(\"click\", async (e) => {\n  e.preventDefault();\n  const cityInput = searchInput.value.replace(/\\s/g, \"%20\");\n  const url = `https://api.openweathermap.org/geo/1.0/direct?q=${cityInput}&limit=5&appid=${apiKey}`;\n\n  // display loading screen\n  loadingScreen.style.display = \"block\";\n  // fetch ciudades\n  const citiesResponse = await fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw res.json();\n      }\n      return res.json();\n    })\n    .then((data) => {\n      return data;\n    })\n    .catch((err) => {\n      err.then((msg) => console.log(msg.message));\n    });\n\n  loadingScreen.style.display = \"none\";\n  // mostrar lista de ciudades\n\n  if (citiesResponse.length === 0) {\n    alert(\"No cities found\");\n  } else if (citiesResponse.length === 1) {\n    console.log(\"una sola ciudad\");\n  } else {\n    let docFrag = document.createDocumentFragment();\n    citiesResponse.forEach((city) => {\n      let cityOption = document.createElement(\"div\");\n      cityOption.classList.add(\"city\");\n      cityOption.setAttribute(\"data-lat\", Math.round(city.lat * 100) / 100);\n      cityOption.setAttribute(\"data-lon\", Math.round(city.lon * 100) / 100);\n      cityOption.setAttribute(\"data-city\", city.name);\n      cityOption.setAttribute(\"data-state\", city.state ? city.state : \"\");\n      cityOption.setAttribute(\"data-country\", city.country);\n      cityOption.innerHTML = `${city.name}, ${city.state}, ${city.country}`;\n      docFrag.appendChild(cityOption);\n    });\n    document.querySelector(\".city-options-card-body\").appendChild(docFrag);\n    searchResults.style.display = \"block\";\n  }\n\n  // cerrar listado de ciudades\n  searchResults.addEventListener(\"click\", (e) => {\n    closeSearchResults(e);\n  });\n});\n\n// Get weather\n\nconst mainCity = document.querySelector(\n  \"#current-weather-card-header-location-text\"\n);\n\nconst mainIcon = document.querySelector(\n  \".current-weather-card-body-temperature-main-img\"\n);\n\nconst mainWeatherVal = document.querySelector(\n  \".current-weather-card-body-temperature-main-value\"\n);\nconst mainWeatherMin = document.querySelector(\n  \".current-weather-card-body-temperature-range-min\"\n);\nconst mainWeatherMax = document.querySelector(\n  \".current-weather-card-body-temperature-range-max\"\n);\n\nconst mainWeatherHumid = document.querySelector(\".humidity\");\nconst mainWeatherPress = document.querySelector(\n  \".current-weather-card-body-description-value.pressure\"\n);\nconst mainWeatherVisib = document.querySelector(\n  \".current-weather-card-body-description-value.visibility\"\n);\nconst mainWeatherWind = document.querySelector(\n  \".current-weather-card-body-description-value.wind\"\n);\n\nsearchResultsList.addEventListener(\"click\", async (e) => {\n  let coord = [\n    e.target.getAttribute(\"data-lat\"),\n    e.target.getAttribute(\"data-lon\"),\n    e.target.getAttribute(\"data-city\"),\n    e.target.getAttribute(\"data-state\"),\n    e.target.getAttribute(\"data-country\"),\n  ];\n  const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${coord[0]}&lon=${coord[1]}&exclude=minutely,hourly,alerts&units=metric&appid=${apiKey}`;\n\n  const weather = await fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw res.json();\n      }\n      return res.json();\n    })\n    .then((data) => {\n      return data;\n    })\n    .catch((err) => {\n      err.then((msg) => console.log(msg.message));\n    });\n\n  // populate current weather\n  console.log(weather);\n  mainCity.innerHTML = coord[3]\n    ? `${coord[2]}, ${coord[3]}, ${coord[4]}`\n    : `${coord[2]}, ${coord[4]}`;\n  mainIcon.src = `https://openweathermap.org/img/wn/${weather.current.weather[0].icon}@2x.png`;\n  mainWeatherVal.innerHTML = `${Math.round(weather.current.temp)} °C`;\n  mainWeatherMin.innerHTML = `${Math.round(weather.daily[0].temp.min)} °C`;\n  mainWeatherMax.innerHTML = `${Math.round(weather.daily[0].temp.max)} °C`;\n  mainWeatherHumid.innerHTML = `Humidity: ${weather.current.humidity} %`;\n  mainWeatherPress.innerHTML = `Pressure: ${weather.current.pressure} hPa`;\n  mainWeatherVisib.innerHTML = `Visibility: ${\n    weather.current.visibility / 1000\n  } km`;\n  mainWeatherWind.innerHTML = `Wind: ${weather.current.wind_speed} m/s`;\n\n  // populate daily weather\n\n  const weatherCards = document.querySelectorAll(\".forecast-weather-body-card\");\n  const weekday = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  weatherCards.forEach((card, idx) => {\n    var date = new Date(weather.daily[idx + 1].dt * 1000);\n    card.querySelector(\".forecast-weather-body-card-header\").innerHTML =\n      weekday[date.getDay()];\n    card.querySelector(\n      \".forecast-weather-body-card-body-img\"\n    ).src = `https://openweathermap.org/img/wn/${\n      weather.daily[idx + 1].weather[0].icon\n    }@2x.png`;\n    card.querySelector(\n      \".forecast-weather-body-card-body-temperature-range-min\"\n    ).innerHTML = `${Math.round(weather.daily[idx + 1].temp.min)} °C`;\n    card.querySelector(\n      \".forecast-weather-body-card-body-temperature-range-max\"\n    ).innerHTML = `${Math.round(weather.daily[idx + 1].temp.max)} °C`;\n  });\n});\n\n// Cerrar listado de ciudades\n\nconst closeSearchResults = (e) => {\n  if (\n    e.target.classList.contains(\"city-options\") ||\n    e.target.classList.contains(\"city\")\n  ) {\n    // clean list\n    document.querySelector(\".city-options-card-body\").innerHTML = \"\";\n    // hide list\n    searchResults.style.display = \"none\";\n  }\n};\n\n\n//# sourceURL=webpack://weatherapp/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;